require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/events/:event_id/event_tickets", type: :request do

  # This should return the minimal set of attributes required to create a valid
  # EventTicket. As you add validations to EventTicket, be sure to
  # adjust the attributes here as well.
  let(:event) { Event.create(name: 'Event name') }

  let(:valid_attributes) {
    {
      name: 'Ticket name',
      event_id: event.id,
    }
  }

  let(:invalid_attributes) {
    {
      name: '',
    }
  }

  describe "GET /events/:event_id/event_tickets/new" do
    it "renders a successful response" do
      get new_event_event_ticket_url(event)
      expect(response).to be_successful
    end
  end

  describe "GET /events/:event_id/event_tickets/:id/edit" do
    it "renders a successful response" do
      event_ticket = EventTicket.create! valid_attributes
      get edit_event_event_ticket_url(event, event_ticket)
      expect(response).to be_successful
    end
  end

  describe "POST /events/:event_id/event_tickets/create" do
    context "with valid parameters" do
      it "creates a new EventTicket" do
        expect {
          post event_event_tickets_url(event), params: { event_ticket: valid_attributes }
        }.to change(EventTicket, :count).by(1)
      end

      it "redirects to the created event_ticket" do
        post event_event_tickets_url(event), params: { event_ticket: valid_attributes }
        expect(response).to redirect_to(event_url(event))
      end
    end

    context "with invalid parameters" do
      it "does not create a new EventTicket" do
        expect {
          post event_event_tickets_url(event), params: { event_ticket: invalid_attributes }
        }.to change(EventTicket, :count).by(0)
      end


      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post event_event_tickets_url(event), params: { event_ticket: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end

    end
  end

  describe "PATCH /events/:event_id/event_tickets/:id/update" do
    context "with valid parameters" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested event_ticket" do
        event_ticket = EventTicket.create! valid_attributes
        patch event_event_ticket_url(event, event_ticket), params: { event_ticket: new_attributes }
        event_ticket.reload
        skip("Add assertions for updated state")
      end

      it "redirects to the event_ticket" do
        event_ticket = EventTicket.create! valid_attributes
        patch event_event_ticket_url(event, event_ticket), params: { event_ticket: new_attributes }
        event_ticket.reload
        expect(response).to redirect_to(event_url(event))
      end
    end

    context "with invalid parameters" do

      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        event_ticket = EventTicket.create! valid_attributes
        patch event_event_ticket_url(event, event_ticket), params: { event_ticket: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end

    end
  end

  describe "DELETE /events/:event_id/event_tickets/:id/destroy" do
    it "destroys the requested event_ticket" do
      event_ticket = EventTicket.create! valid_attributes
      expect {
        delete event_event_ticket_url(event, event_ticket)
      }.to change(EventTicket, :count).by(-1)
    end

    it "redirects to the event_tickets list" do
      event_ticket = EventTicket.create! valid_attributes
      delete event_event_ticket_url(event, event_ticket)
      expect(response).to redirect_to(event_url(event))
    end
  end
end
