require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/ticket_purchases", type: :request do
  let(:event) { Event.create!(name: 'Event name') }
  let(:ticket_type) { TicketType.create!(name: 'Ticket name', event: event) }

  # This should return the minimal set of attributes required to create a valid
  # TicketPurchase. As you add validations to TicketPurchase, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      ticket_type_id: ticket_type.id,
    }
  }

  let(:invalid_attributes) {
    {
      ticket_type_id: ticket_type.id,
      number_of_purchased: 0,
    }
  }

  describe "GET /show" do
    it "renders a successful response" do
      ticket_purchase = TicketPurchase.create!(ticket_type: ticket_type)
      get event_ticket_purchase_url(event, ticket_purchase)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_event_ticket_purchase_url(event)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new TicketPurchase" do
        expect {
          post event_ticket_purchases_url(event), params: { ticket_purchase: valid_attributes }
        }.to change(TicketPurchase, :count).by(1)
      end

      it "redirects to the created ticket_purchase" do
        post event_ticket_purchases_url(event), params: { ticket_purchase: valid_attributes }
        expect(response).to redirect_to(event_ticket_purchase_url(event, TicketPurchase.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new TicketPurchase" do
        expect {
          post event_ticket_purchases_url(event), params: { ticket_purchase: invalid_attributes }
        }.to change(TicketPurchase, :count).by(0)
      end


      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post event_ticket_purchases_url(event), params: { ticket_purchase: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end

    end
  end
end
